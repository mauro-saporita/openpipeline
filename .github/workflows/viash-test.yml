name: viash test

on:
  pull_request:
  push:
    branches: [ '**' ]

jobs:
  run_ci_check_job:
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.github_cli.outputs.check }}
    steps:
      - name: 'Check if branch has an existing pull request and the trigger was a push'
        id: github_cli
        run: |
          pull_request=$(gh pr list -R ${{ github.repository }} -H ${{ github.ref_name }} --json url --state open --limit 1 | jq '.[0].url')
          # If the branch has a PR and this run was triggered by a push event, do not run
          if [[ "$pull_request" != "null" && "$GITHUB_REF_NAME" != "main" && "${{ github.event_name == 'push' }}" == "true" && "${{ !contains(github.event.head_commit.message, 'ci force') }}" == "true" ]]; then
            echo "check=false" >> $GITHUB_OUTPUT
          else
            echo "check=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GTHB_PAT }}

  # phase 1
  list:
    needs: run_ci_check_job
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest
    if: "needs.run_ci_check_job.outputs.run_ci == 'true'"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      test_resources_dirs: ${{ steps.set_matrix.outputs.matrix }}
      cache_dirs: ${{ steps.find_resources.outputs.cache_dirs }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - uses: viash-io/viash-actions/setup@v3

    - uses: viash-io/viash-actions/project/sync-and-cache-s3@v3
      id: cache
      with:
        s3_bucket: $s3_bucket
        dest_path: resources_test
        cache_key_prefix: resources_test__

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35.5.6
      with:
        separator: ";"
        diff_relative: true

    - id: ns_list
      uses: viash-io/viash-actions/ns-list@v3
      with:
        platform: docker
        format: json

    - id: ns_list_filtered
      uses: viash-io/viash-actions/project/detect-changed-components@v3
      with:
        input_file: "${{ steps.ns_list.outputs.output_file }}"

    - id: set_matrix
      run: |
        echo "matrix=$(jq -c '[ .[] | 
          { 
            "name": (.functionality.namespace + "/" + .functionality.name),
            "config": .info.config,
            "dir": .info.config | capture("^(?<dir>.*\/)").dir
          }
        ]' ${{ steps.ns_list_filtered.outputs.output_file }} )" >> $GITHUB_OUTPUT

    # create cache
    - name: Find resources
      id: find_resources
      run: |
        readarray -t resources < <(jq -c -r 'reduce ( .[] | (.info.config | capture("^(?<dir>.*\/)").dir) as $dir | (.functionality.test_resources | map(select(.type == "file"))) | map($dir + .path)) as $item ([]; . + $item) | unique | .[]' ${{ steps.ns_list_filtered.outputs.output_file }} )
        all_directories=()
        for resource in "${resources[@]}"; do
          resource_project_path=$(realpath --quiet --relative-to="$GITHUB_WORKSPACE" "$resource")
          cache_dir_with_children="${resource_project_path#*resources_test/}"
          top_cache_dir="${cache_dir_with_children%%/*}"
          # Check if the file is within the 'resources_test' folder
          if [[ $resource_project_path == *"resources_test"* ]]; then
            all_directories+=( "$top_cache_dir" )
          fi
        done
        IFS=" " read -r -a unique_directories <<< "$(tr ' ' '\n' <<< "${all_directories[@]}" | sort -u | tr '\n' ' ')"
        echo "cache_dirs=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${unique_directories[@]}")" >> $GITHUB_OUTPUT

  cache_resources:
    needs: list 
    env:
      s3_bucket: s3://openpipelines-data/
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        resource_dir: ${{ fromJson(needs.list.outputs.cache_dirs) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: viash-io/viash-actions/setup@v3

      - uses: viash-io/viash-actions/project/sync-and-cache-s3@v3
        with:
          s3_bucket: ${{ format('{0}/{1}', env.s3_bucket, matrix.resource_dir)
          dest_path: ${{ format('{0}/{1}', 'resources_test', matrix.resource_dir)
          cache_key_prefix: ${{ format('{0}_{1}__', 'resources_test', matrix.resource_dir)

  # phase 2
  viash_test:
    needs: [cache_resources, list]
    if: ${{ needs.list.outputs.matrix != '[]' && needs.list.outputs.matrix != '' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.list.outputs.matrix) }}

    steps:
    - uses: actions/checkout@v3

    - uses: viash-io/viash-actions/setup@v3

    - name: Find cached directories
      id: find_cache_dirs
      run: |
        readarray -t resources < <(viash config view --format json "${{ matrix.component.config }}" | jq -c '(.info.config | capture("^(?<dir>.*\/)").dir) as $dir | .functionality.test_resources | map(select(.type == "file")) | map($dir + .path) | unique')
        all_directories=()
        for resource in "${resources[@]}"; do
          resource_project_path=$(realpath --quiet --relative-to="$GITHUB_WORKSPACE" "$resource")
          cache_dir_with_children="${resource_project_path#*resources_test/}"
          top_cache_dir="${cache_dir_with_children%%/*}"
          # Check if the file is within the 'resources_test' folder
          if [[ $resource_project_path == *"resources_test"* ]]; then
            all_directories+=( "resources_test/$top_cache_dir" )
          fi
        done
        IFS=" " read -r -a unique_directories <<< "$(tr ' ' '\n' <<< "${all_directories[@]}" | sort -u | tr '\n' ' ')"
        echo "resources_dir=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${unique_directories[@]}")" >> $GITHUB_OUTPUT

        keys=()
        for unique_directory in "$unique_directories[@]"; do
          keys+= ("resources_test_$unique_directory__")
        done
        echo "keys=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${unique_directories[@]}")" >> $GITHUB_OUTPUT

    - name: Restore cache
      uses: actions/cache@v3
      timeout-minutes: 10
      with:
        path: ${{ steps.output.resources_dir }}
        key: ${{ steps.output.keys }}
        fail-on-cache-miss: true

    - name: Login to the nvidia container registry
      uses: docker/login-action@v2
      with:
        registry: nvcr.io
        username: ${{ secrets.NVIDIA_USERNAME }}
        password: ${{ secrets.NVIDIA_PASSWORD }}

    - name: Run test
      timeout-minutes: 30
      run: |
        viash test \
          "${{ matrix.component.config }}" \
          --cpus 2 \
          --memory "5gb"

